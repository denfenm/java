/*
1.	Write methods involving linked lists for the problems given below (hint: methods should receive LinkedList as input parameters).
        LinkedList<String> arrl = new LinkedList<String>();
        Printlist(arr1);     // call method

    // example of method declaration
    public static void printlist (LinkedList<String> list) {
        System.out.println("In Method:");
        for(String str: list){
            System.out.println(str);
        }
     }

public static void searchlist (LinkedList<String> list, String s) {
}

a)	write a method to test whether a particular item is in a linked list. So if the item is 4 and the list is [1,3,7,4,3,7,2], the method returns true; if the item is 6 and the list is [1,3,7,4,3,7,2], the method returns false.

b)	write a method to count the number of times a particular item occurs in a linked list. So if the item is 7 and the list is [1,3,7,4,3,7,2], the result is 2.

c)	Given an item and a linked list, write a method to return the position of the first occurrence of the item in the linked list, or -1 if it does not occur. So if the item is 5 and the list is [2,4,5,8,1,5,3], the result is 2 (using the Java convention that positions start at 0).

d)	write a method to delete (remove()) the first occurrence of an item from a linked list. So if the item is 7 and the list is [1,3,7,4,3,7,2], the result is [1,3,4,3,7,2].

e)	write a method to delete all occurrences of an item from a linked list. So if the item is 7 and the list is [1,3,7,4,3,7,2], the result is [1,3,4,3,2].


Complete the program using the above code segments that you have written for the five problems. Compile and run the program to ensure that it works properly (test with some sample input data).

*/

import java.util.*;

public class Q1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		LinkedList<Integer> arr1 = new LinkedList<Integer>();
		
		arr1.add(1);
		arr1.add(2);
		arr1.add(3);
		arr1.add(4);
		arr1.add(5);
		arr1.add(2);
		
		
		Printlist(arr1);
		System.out.println("occur"+ count(arr1, 2));
		System.out.println("Position of 4 is :" );
		position(arr1, 4);
		/*int num = 3;
		System.out.println("\nNumber "+num+" occurance "+ Collections.frequency(arr1, num));
	*/
		
		delete(arr1, 2);
		Printlist(arr1);
		
		//print index occurences
		/*
		System.out.println("First index of " + num + " is " +arr1.indexOf(num));
		System.out.print("Last index of " + num + " is " + arr1.lastIndexOf(num));*/
		
			}
public static void Printlist(LinkedList<Integer> list) {
	System.out.println("In Method:");
	for(Integer i : list) 
		System.out.println(i);
}

public static void searchList(LinkedList<Integer> list, int i) {
	if(list.contains(i)) {
		System.out.println("True");
	} else {
		System.out.println("Does not exist");
		
	}
}



public static boolean searhList(LinkedList<Integer> list, int i) {
	if(list.contains(i)) 
		
		return true;
		
	else 
		return false;
	
	/*
	 * boolean exist=false;
	 * if(list.contains(num))
	 * exist=true;
	 * else 
	 * exist=false;
	 * return exist;
	 */
	
}

public static int count(LinkedList<Integer> list, Integer n) {
	/*
	int x = 0;
	for(Integer value: list)
	{
		if(value.equals(n))
		{
			x++;
		}
		}
	return x;
	*/
	int count = 0;
	count = Collections.frequency(list, n);
	return count;
	
	}

//c
public static void position(LinkedList<Integer> list, int i) {
	int x;
	int position;
	for(x=0; x<list.size(); x++)  {
		if(list.get(x).equals(i)) { 
			position = x;
			System.out.println(position);
			break;
		}
}

}

//d
public static void delete(LinkedList<Integer> list, Integer i) {
	list.remove(i);
	
	
}

//e
public static void deleteAll(LinkedList<Integer> list, Integer i) {
	
	list.removeAll(Collections.singleton(i));
	
	
	
}
}
